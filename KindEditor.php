<?php
namespace moxuandi\kindeditor;

use yii\helpers\Html;
use yii\helpers\Json;
use yii\helpers\Url;
use yii\web\View;
use yii\widgets\InputWidget;

/**
 * KindEditor renders a editor js plugin for classic editing.
 *
 * @author  zhangmoxuan <1104984259@qq.com>
 * @link  http://www.zhangmoxuan.com
 * @QQ  1104984259
 * @Date  2017-7-15
 * @see http://kindeditor.net
 */
class KindEditor extends InputWidget
{
    public $clientOptions = [];  // 配置接口, 参阅 KindEditor 官方文档(http://kindeditor.net/docs/option.html)

    /** 定义编辑器的类型
     * textEditor: HTML编辑器(默认)
     * colorPicker: 取色器
     * uploadButton: 自定义上传按钮
     * fileDialog: 上传文件
     * imageDialog: 上传图片(网络图片 + 本地上传)
     * RemoteImageDialog: 上传图片(网络图片)
     * LocalImageDialog: 上传图片(本地上传)
     * imageManager: 浏览服务器(图片)
     * flashManager: 浏览服务器(Flash)
     * mediaManager: 浏览服务器(视音频)
     * fileManager: 浏览服务器(文件)
     * multiImageDialog: 批量上传图片(未实现)
     */
    public $editorType;

    public $inputOptions = [];  // input输入域的html属性

    public $buttonOptions = [];  // button按钮的html属性


    public function init()
    {
        //$this->id = $this->hasModel() ? Html::getInputId($this->model, $this->attribute) : $this->id;
        if($this->hasModel()){
            $this->id = Html::getInputId($this->model, $this->attribute);
        }elseif($this->attribute){
            $this->id = $this->id . '_' . $this->attribute;
        }

        // 默认配置
        $_options = [
            'allowFileManager' => true,     // 显示浏览远程服务器按钮
            'uploadJson' => Url::to(['Kupload', 'action'=>'uploadJson']),
            'fileManagerJson' => Url::to(['Kupload', 'action'=>'fileManagerJson']),
            'width' => '100%',
            'height' => 500
        ];
        $this->clientOptions = array_merge($_options, $this->clientOptions);
        if($this->hasModel()){
            parent::init(); // TODO: Change the autogenerated stub
        }
    }

    public function run()
    {
        self::registerClientScript();
        $this->inputOptions = array_merge(['id'=>$this->id, 'class'=>'form-control'], $this->inputOptions);
        if($this->hasModel()){
            switch($this->editorType){
                case 'colorPicker': return Html::activeTextInput($this->model, $this->attribute, $this->inputOptions) . Html::button('打开取色器', array_merge(['id'=>'k_colorPicker', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'uploadButton': return Html::activeTextInput($this->model, $this->attribute, $this->inputOptions) . Html::button('选择文件', array_merge(['id'=>'k_uploadButton', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'fileDialog': return Html::activeTextInput($this->model, $this->attribute, $this->inputOptions) . Html::button('选择文件', array_merge(['id'=>'k_fileDialog', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'imageDialog': return Html::activeTextInput($this->model, $this->attribute, $this->inputOptions) . Html::button('选择图片', array_merge(['id'=>'k_imageDialog', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'RemoteImageDialog': return Html::activeTextInput($this->model, $this->attribute, $this->inputOptions) . Html::button('选择图片', array_merge(['id'=>'k_RemoteImageDialog', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'LocalImageDialog': return Html::activeTextInput($this->model, $this->attribute, $this->inputOptions) . Html::button('选择图片', array_merge(['id'=>'k_LocalImageDialog', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'imageManager': return Html::activeTextInput($this->model, $this->attribute, $this->inputOptions) . Html::button('浏览服务器', array_merge(['id'=>'k_imageManager', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'flashManager': return Html::activeTextInput($this->model, $this->attribute, $this->inputOptions) . Html::button('浏览服务器', array_merge(['id'=>'k_flashManager', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'mediaManager': return Html::activeTextInput($this->model, $this->attribute, $this->inputOptions) . Html::button('浏览服务器', array_merge(['id'=>'k_mediaManager', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'fileManager': return Html::activeTextInput($this->model, $this->attribute, $this->inputOptions) . Html::button('浏览服务器', array_merge(['id'=>'k_fileManager', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                default: return Html::activeTextarea($this->model, $this->attribute, ['id'=>$this->id]); break;
            }
        }else{
            switch($this->editorType){
                case 'colorPicker': return Html::textInput($this->id, $this->value, $this->inputOptions) . Html::button('打开取色器', array_merge(['id'=>'k_colorPicker', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'uploadButton': return Html::textInput($this->id, $this->value, $this->inputOptions) . Html::button('选择文件', array_merge(['id'=>'k_uploadButton', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'fileDialog': return Html::textInput($this->id, $this->value, $this->inputOptions) . Html::button('选择文件', array_merge(['id'=>'k_fileDialog', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'imageDialog': return Html::textInput($this->id, $this->value, $this->inputOptions) . Html::button('选择图片', array_merge(['id'=>'k_imageDialog', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'RemoteImageDialog': return Html::textInput($this->id, $this->value, $this->inputOptions) . Html::button('选择图片', array_merge(['id'=>'k_RemoteImageDialog', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'LocalImageDialog': return Html::textInput($this->id, $this->value, $this->inputOptions) . Html::button('选择图片', array_merge(['id'=>'k_LocalImageDialog', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'imageManager': return Html::textInput($this->id, $this->value, $this->inputOptions) . Html::button('浏览服务器', array_merge(['id'=>'k_imageManager', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'flashManager': return Html::textInput($this->id, $this->value, $this->inputOptions) . Html::button('浏览服务器', array_merge(['id'=>'k_flashManager', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'mediaManager': return Html::textInput($this->id, $this->value, $this->inputOptions) . Html::button('浏览服务器', array_merge(['id'=>'k_mediaManager', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                case 'fileManager': return Html::textInput($this->id, $this->value, $this->inputOptions) . Html::button('浏览服务器', array_merge(['id'=>'k_fileManager', 'class'=>'btn btn-default'], $this->buttonOptions)); break;
                default: return Html::textarea($this->id, $this->value, ['id'=>$this->id]); break;
            }
        }
    }

    /**
     * 注册客户端脚本
     */
    protected function registerClientScript()
    {
        KindEditorAsset::register($this->view);
        switch($this->editorType){
            case 'colorPicker':
                $script = <<<EOT
KindEditor.ready(function(K){
    var colorpicker;
    K('#k_colorPicker').bind('click', function(e){
        e.stopPropagation();
        if(colorpicker){
            colorpicker.remove();
            colorpicker = null;
            return;
        }
        var colorpickerPos = K('#k_colorPicker').pos();
        colorpicker = K.colorpicker({
            x: colorpickerPos.x,
            y: colorpickerPos.y + K('#k_colorPicker').height(),
            z: 19811214,
            selectedColor: 'default',
            noColor: '无颜色',
            click: function(color){
                K('#{$this->id}').val(color);
                colorpicker.remove();
                colorpicker = null;
            }
        });
    });
    K(document).click(function(){
        if(colorpicker){
            colorpicker.remove();
            colorpicker = null;
        }
    });
});
EOT;
                break;
            case 'uploadButton':
                $url = Url::to(['Kupload', 'action'=>'uploadJson', 'dir'=>'file']);
                $script = <<<EOT
KindEditor.ready(function(K){
    var uploadbutton = K.uploadbutton({
        button: K('#k_uploadButton')[0],
        fieldName: 'imgFile',
        url: '{$url}',
        afterUpload: function(data){
            if(data.error === 0){
                var url = K.formatUrl(data.url, 'absolute');
                K('#{$this->id}').val(url);
            }else{
                alert(data.message);
            }
        },
        afterError: function(str){
            alert('自定义错误信息: ' + str);
        }
    });
    uploadbutton.fileBox.change(function(e){
        uploadbutton.submit();
    });
});
EOT;
                break;
            case 'fileDialog':
                $script = <<<EOT
KindEditor.ready(function(K){
    var editor = K.editor({
        allowFileManager: true,
        uploadJson: "{$this->clientOptions['uploadJson']}",
        fileManagerJson: "{$this->clientOptions['fileManagerJson']}"
    });
    K('#k_fileDialog').click(function(){
        editor.loadPlugin('insertfile', function(){
            editor.plugin.fileDialog({
                fileUrl: K('#{$this->id}').val(),
                clickFn: function(url, title){
                    K('#{$this->id}').val(url);
                    editor.hideDialog();
                }
            });
        });
    });
});
EOT;
                break;
            case 'imageDialog':
                $script = <<<EOT
KindEditor.ready(function(K){
    var editor = K.editor({
        allowFileManager : true,
        uploadJson: "{$this->clientOptions['uploadJson']}",
        fileManagerJson: "{$this->clientOptions['fileManagerJson']}"
    });
    K('#k_imageDialog').click(function(){
        editor.loadPlugin('image', function(){
            editor.plugin.imageDialog({
                imageUrl: K('#{$this->id}').val(),
                clickFn: function(url, title, width, height, border, align){
                    K('#{$this->id}').val(url);
                    editor.hideDialog();
                }
            });
        });
    });
});
EOT;
                break;
            case 'RemoteImageDialog':
                $script = <<<EOT
KindEditor.ready(function(K){
    var editor = K.editor({
        allowFileManager : true,
        uploadJson: "{$this->clientOptions['uploadJson']}",
        fileManagerJson: "{$this->clientOptions['fileManagerJson']}"
    });
    K('#k_RemoteImageDialog').click(function(){
        editor.loadPlugin('image', function(){
            editor.plugin.imageDialog({
                showLocal: false,
                imageUrl: K('#{$this->id}').val(),
                clickFn: function(url, title, width, height, border, align){
                    K('#{$this->id}').val(url);
                    editor.hideDialog();
                }
            });
        });
    });
});
EOT;
                break;
            case 'LocalImageDialog':
                $script = <<<EOT
KindEditor.ready(function(K){
    var editor = K.editor({
        allowFileManager : true,
        uploadJson: "{$this->clientOptions['uploadJson']}",
        fileManagerJson: "{$this->clientOptions['fileManagerJson']}"
    });
    K('#k_LocalImageDialog').click(function(){
        editor.loadPlugin('image', function(){
            editor.plugin.imageDialog({
                showRemote: false,
                imageUrl: K('#{$this->id}').val(),
                clickFn: function(url, title, width, height, border, align){
                    K('#{$this->id}').val(url);
                    editor.hideDialog();
                }
            });
        });
    });
});
EOT;
                break;
            case 'imageManager':
                $script = <<<EOT
KindEditor.ready(function(K){
    var editor = K.editor({
        fileManagerJson: "{$this->clientOptions['fileManagerJson']}"
    });
    K('#k_imageManager').click(function(){
        editor.loadPlugin('filemanager', function(){
            editor.plugin.filemanagerDialog({
                viewType: 'VIEW',
                dirName: 'image',
                clickFn: function(url, title){
                    K('#{$this->id}').val(url);
                    editor.hideDialog();
                }
            });
        });
    });
});
EOT;
                break;
            case 'flashManager':
                $script = <<<EOT
KindEditor.ready(function(K){
    var editor = K.editor({
        fileManagerJson: "{$this->clientOptions['fileManagerJson']}"
    });
    K('#k_flashManager').click(function(){
        editor.loadPlugin('filemanager', function(){
            editor.plugin.filemanagerDialog({
                viewType: 'LIST',
                dirName: 'flash',
                clickFn: function(url, title){
                    K('#{$this->id}').val(url);
                    editor.hideDialog();
                }
            });
        });
    });
});
EOT;
                break;
            case 'mediaManager':
                $script = <<<EOT
KindEditor.ready(function(K){
    var editor = K.editor({
        fileManagerJson: "{$this->clientOptions['fileManagerJson']}"
    });
    K('#k_mediaManager').click(function(){
        editor.loadPlugin('filemanager', function(){
            editor.plugin.filemanagerDialog({
                viewType: 'LIST',
                dirName: 'media',
                clickFn: function(url, title){
                    K('#{$this->id}').val(url);
                    editor.hideDialog();
                }
            });
        });
    });
});
EOT;
                break;
            case 'fileManager':
                $script = <<<EOT
KindEditor.ready(function(K){
    var editor = K.editor({
        fileManagerJson: "{$this->clientOptions['fileManagerJson']}"
    });
    K('#k_fileManager').click(function(){
        editor.loadPlugin('filemanager', function(){
            editor.plugin.filemanagerDialog({
                viewType: 'LIST',
                dirName: 'file',
                clickFn: function(url, title){
                    K('#{$this->id}').val(url);
                    editor.hideDialog();
                }
            });
        });
    });
});
EOT;
                break;
                break;
            default: $script = "KindEditor.ready(function(K){K.create('#{$this->id}', " . Json::encode($this->clientOptions) . ")});"; break;
        }
        $this->view->registerJs($script, View::POS_READY);
    }
}
